{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";const ThemeContext=/*#__PURE__*/createContext(null);export const ThemeProvider=_ref=>{let{children}=_ref;const[theme,setTheme]=useState(\"light\");// Optionnel : détecter le thème système au démarrage\nuseEffect(()=>{const prefersDark=window.matchMedia(\"(prefers-color-scheme: dark)\").matches;setTheme(prefersDark?\"dark\":\"light\");},[]);// Appliquer la classe au body pour gérer le CSS globalement\nuseEffect(()=>{document.body.classList.remove(\"light\",\"dark\");document.body.classList.add(theme);},[theme]);const toggleTheme=()=>{setTheme(prev=>prev===\"light\"?\"dark\":\"light\");};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:{theme,toggleTheme},children:children});};// Hook personnalisé pour utiliser le contexte facilement\nexport const useTheme=()=>{const context=useContext(ThemeContext);if(!context){throw new Error(\"useTheme doit être utilisé dans un ThemeProvider\");}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","ThemeContext","ThemeProvider","_ref","children","theme","setTheme","prefersDark","window","matchMedia","matches","document","body","classList","remove","add","toggleTheme","prev","Provider","value","useTheme","context","Error"],"sources":["C:/Users/HP/Desktop/upl.patforme/frontend/src/components/theme-provider.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode, useEffect } from \"react\";\r\n\r\ntype Theme = \"light\" | \"dark\";\r\n\r\ninterface ThemeContextType {\r\n  theme: Theme;\r\n  toggleTheme: () => void;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType | null>(null);\r\n\r\nexport const ThemeProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [theme, setTheme] = useState<Theme>(\"light\");\r\n\r\n  // Optionnel : détecter le thème système au démarrage\r\n  useEffect(() => {\r\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\r\n    setTheme(prefersDark ? \"dark\" : \"light\");\r\n  }, []);\r\n\r\n  // Appliquer la classe au body pour gérer le CSS globalement\r\n  useEffect(() => {\r\n    document.body.classList.remove(\"light\", \"dark\");\r\n    document.body.classList.add(theme);\r\n  }, [theme]);\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(prev => (prev === \"light\" ? \"dark\" : \"light\"));\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook personnalisé pour utiliser le contexte facilement\r\nexport const useTheme = (): ThemeContextType => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error(\"useTheme doit être utilisé dans un ThemeProvider\");\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAaC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBASzF,KAAM,CAAAC,YAAY,cAAGN,aAAa,CAA0B,IAAI,CAAC,CAEjE,MAAO,MAAM,CAAAO,aAAgD,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC3E,KAAM,CAACE,KAAK,CAAEC,QAAQ,CAAC,CAAGT,QAAQ,CAAQ,OAAO,CAAC,CAElD;AACAC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAS,WAAW,CAAGC,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,CAC7EJ,QAAQ,CAACC,WAAW,CAAG,MAAM,CAAG,OAAO,CAAC,CAC1C,CAAC,CAAE,EAAE,CAAC,CAEN;AACAT,SAAS,CAAC,IAAM,CACda,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,OAAO,CAAE,MAAM,CAAC,CAC/CH,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACE,GAAG,CAACV,KAAK,CAAC,CACpC,CAAC,CAAE,CAACA,KAAK,CAAC,CAAC,CAEX,KAAM,CAAAW,WAAW,CAAGA,CAAA,GAAM,CACxBV,QAAQ,CAACW,IAAI,EAAKA,IAAI,GAAK,OAAO,CAAG,MAAM,CAAG,OAAQ,CAAC,CACzD,CAAC,CAED,mBACEjB,IAAA,CAACC,YAAY,CAACiB,QAAQ,EAACC,KAAK,CAAE,CAAEd,KAAK,CAAEW,WAAY,CAAE,CAAAZ,QAAA,CAClDA,QAAQ,CACY,CAAC,CAE5B,CAAC,CAED;AACA,MAAO,MAAM,CAAAgB,QAAQ,CAAGA,CAAA,GAAwB,CAC9C,KAAM,CAAAC,OAAO,CAAGzB,UAAU,CAACK,YAAY,CAAC,CACxC,GAAI,CAACoB,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,kDAAkD,CAAC,CACrE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}