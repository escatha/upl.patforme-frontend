{"ast":null,"code":"// src/contexts/ExamContext.tsx\nimport React,{createContext,useContext,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const ExamContext=/*#__PURE__*/createContext(undefined);export const ExamProvider=_ref=>{let{children}=_ref;const[exams,setExams]=useState([]);const[activeExam,setActiveExam]=useState(null);const[examStarted,setExamStarted]=useState(false);return/*#__PURE__*/_jsx(ExamContext.Provider,{value:{exams,setExams,activeExam,setActiveExam,examStarted,setExamStarted},children:children});};export const useExam=()=>{const context=useContext(ExamContext);if(!context)throw new Error(\"useExam must be used within an ExamProvider\");return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","ExamContext","undefined","ExamProvider","_ref","children","exams","setExams","activeExam","setActiveExam","examStarted","setExamStarted","Provider","value","useExam","context","Error"],"sources":["C:/Users/HP/Desktop/upl.patforme/frontend/src/contexts/ExamContext.tsx"],"sourcesContent":["// src/contexts/ExamContext.tsx\r\nimport React, { createContext, useContext, useState, ReactNode } from 'react';\r\n\r\ninterface Question {\r\n  id: string;\r\n  question: string;\r\n  options: string[];\r\n  correctAnswer: number;\r\n}\r\n\r\ninterface Exam {\r\n  id: string;\r\n  title: string;\r\n  subject: string;\r\n  questions: Question[];\r\n  duration: number;\r\n  startTime: string;\r\n  endTime: string;\r\n  faculty: string;\r\n  status: 'upcoming' | 'active' | 'completed';\r\n}\r\n\r\ninterface ExamContextType {\r\n  exams: Exam[];\r\n  setExams: (exams: Exam[]) => void;\r\n  activeExam: Exam | null;\r\n  setActiveExam: (exam: Exam | null) => void;\r\n  examStarted: boolean;\r\n  setExamStarted: (started: boolean) => void;\r\n}\r\n\r\nconst ExamContext = createContext<ExamContextType | undefined>(undefined);\r\n\r\nexport const ExamProvider = ({ children }: { children: ReactNode }) => {\r\n  const [exams, setExams] = useState<Exam[]>([]);\r\n  const [activeExam, setActiveExam] = useState<Exam | null>(null);\r\n  const [examStarted, setExamStarted] = useState<boolean>(false);\r\n\r\n  return (\r\n    <ExamContext.Provider\r\n      value={{ exams, setExams, activeExam, setActiveExam, examStarted, setExamStarted }}\r\n    >\r\n      {children}\r\n    </ExamContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useExam = () => {\r\n  const context = useContext(ExamContext);\r\n  if (!context) throw new Error(\"useExam must be used within an ExamProvider\");\r\n  return context;\r\n};"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,KAAmB,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBA8B9E,KAAM,CAAAC,WAAW,cAAGL,aAAa,CAA8BM,SAAS,CAAC,CAEzE,MAAO,MAAM,CAAAC,YAAY,CAAGC,IAAA,EAA2C,IAA1C,CAAEC,QAAkC,CAAC,CAAAD,IAAA,CAChE,KAAM,CAACE,KAAK,CAAEC,QAAQ,CAAC,CAAGT,QAAQ,CAAS,EAAE,CAAC,CAC9C,KAAM,CAACU,UAAU,CAAEC,aAAa,CAAC,CAAGX,QAAQ,CAAc,IAAI,CAAC,CAC/D,KAAM,CAACY,WAAW,CAAEC,cAAc,CAAC,CAAGb,QAAQ,CAAU,KAAK,CAAC,CAE9D,mBACEE,IAAA,CAACC,WAAW,CAACW,QAAQ,EACnBC,KAAK,CAAE,CAAEP,KAAK,CAAEC,QAAQ,CAAEC,UAAU,CAAEC,aAAa,CAAEC,WAAW,CAAEC,cAAe,CAAE,CAAAN,QAAA,CAElFA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED,MAAO,MAAM,CAAAS,OAAO,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,OAAO,CAAGlB,UAAU,CAACI,WAAW,CAAC,CACvC,GAAI,CAACc,OAAO,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,6CAA6C,CAAC,CAC5E,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}